Promgen Web Application Installation Guide
Document Written and Submitted By: Emmanuel Yong
This documentation outlines the steps required to install, configure and run Promgen web application on a linux server

Assumptions
-	CentOS 7.4 minimal server is used as the base operating system for this installation guide..
-	Python 3.6 and its required dependencies is installed.
-	A supported database such as MySQL is installed and a database is created for promgen.
-	Redis server is installed.
-	
Section 1 - Deploying Promgen Web Application
Step 1: Download Promgen Source File and Place Inside /usr/src
# cd /usr/src
# wget https://github.com/line/promgen/archive/v0.25.tar.gz

Step 2: Extract Promgen Source File
# tar -xvzf v0.25.tar.gz

Step 3: Set up an Application Directory and a Python Virtual Environment
# mkdir /opt/promgen
# virtualenv --python=/usr/bin/python3 /opt/promgen

Step 4: Activate the Promgen Virtual Environment
# source /opt/promgen/bin/activate

Step 5: Install Promgen and All Required Dependencies
# pip install –e /usr/src/promgen-0.25/
# pip install mysqlclient
# pip install django_nose

Step 6: Run Initial Setup
Follow the steps provide such as accepting the randomly generated secret key, input the database url and redis url as per below sample output

# promgen bootstrap

/usr/src/promgen/promgen/settings.py:37: UserWarning: Unset SECRET_KEY setting to random for now
warnings.warn('Unset SECRET_KEY setting to random for now')

Bootstrapping Promgen
Creating config directory /root/.config/promgen 

Creating promgen config /root/.config/promgen/promgen.yml from /usr/src/promgen/promgen/tests/examples/promgen.yml

Use d3sjd#3bv_-$smapbd!gjgt7lvg0f#ivms9f6ks)i39fn(ktv- for SECRET_KEY ? (yes/no) yes
Writing d3sjd#3bv_-$smapbd!gjgt7lvg0f#ivms9f6ks)i39fn(ktv- to /root/.config/promgen/SECRET_KEY

Please enter a value for DATABASE_URL: mysql://root:password!@localhost/promgen
Writing mysql://root:Iv0011.net!@localhost/promgen to /root/.config/promgen/DATABASE_URL

Please enter a value for CELERY_BROKER_URL: redis://localhost:6379/0
Writing redis://localhost:6379/0 to /root/.config/promgen/CELERY_BROKER_URL

Step 7: Run Database Migrations
# promgen migrate

Step 8: Create a Super User
# promgen createsuperuser

Step 9: Collect Static Files
# promgen collectstatic

Step 10: Test the Application
promgen test

Step 11: Run The Development Server
promgen runserver 0.0.0.0:8000
 
Section 2 - Web Server Deployment
For purpose of simplicity, the Promgen WSGI application will be served by uWSGI. Nginx web server will be installed and used as a reverse proxy to the application server to provide more robust connection handling.

Step 1: Nginx Web Server Installation

Install Nginx Using Yum Command
yum install nginx -y

Once the installation is complete, we'll start the nginx daemon with the following command:
# systemctl start nginx

To ensure that the nginx daemon is started, issue the following command
# sudo systemctl status nginx

Finally after ensuring that nginx is able to start successfully, we will use the systemctl enable command to ensure that nginx will start at boot.
# sudo systemctl enable nginx

Step 2: Installation of uWSGI Under Promgen Virtual Environment

Activate the promgen virtual environment and install uWSGI
# pip install uwsgi

Step 3: Configure a uWSGI Config File
Create the following file promgen.ini and place it under /opt/promgen

[uwsgi]
module = promgen.wsgi:application

master = true
processes = 5

uid = root
socket = /run/uwsgi/promgen.sock
chown-socket = root:nginx
chmod-socket = 660
vacuum = true

die-on-term = true

 
Step 4: Create a Systemd Unit File to Manage the App
To ensure that the uWSGI instance can be launched at boot to serve Promgen application, we will create a systemd unit file called promgen.service. Place the promgen.service in the /etc/systemd/system directory.

Content of promgen.service
[Unit]
Description=uWSGI Instance to serve Promgen

[Service]
ExecStartPre=-/usr/bin/bash -c 'mkdir -p /run/uwsgi; chown root:nginx /run/uwsgi'
ExecStart=/usr/bin/bash -c 'cd /opt/promgen; source /opt/promgen/bin/activate; uwsgi --ini /opt/promgen/promgen.ini'

[Install]
WantedBy=multi-user.target

Once the promgen.service file is created, we will test the service by starting the service and checking its status to ensure that there is no error.
# sudo systemctl daemon-reload
# sudo systemctl start promgen
# sudo systemctl status promgen

Finally after ensuring that promgen.service is able to start successfully, we will use the systemctl enable command to ensure that promgen.service will start at boot.
# sudo systemctl enable promgen

Step 5: Configure promgen static file location
Create a folder called static under /opt/promgen and copy all the files from promgen collectstatic to this folder. Grant nginx read permission to this folder
# sudo mkdir /opt/promgen/static
# sudo cp –r /root/.cache/promgen/* /opt/promgen/static
# sudo chown -R nginx /opt/promgen/static/*
# sudo chmod 755 /opt/promgen/static/* 

Step 6: Configure Nginx to Proxy to uWSGI
To configure Nginx to proxy using the uwsgi protocol for communicating with uWSGI, we will edit the existing nginx.conf and add a new server block

Content of nginx.conf
    server {
    listen 80;
    server_name 10.10.10.10;

    location / {
        include uwsgi_params;
        uwsgi_pass unix:/run/uwsgi/promgen.sock;
      }
	
	location /static/ {
       alias /opt/promgen/static/;
    }
   } 		

After saving the above file, we will restart the nginx service and promgen service
# sudo systemctl restart promgen
# sudo systemctl restart nginx


Step 6: Use promgen
On any web browser, navigate to http://hostname-of-promgen

Congratulation, promgen is successfully installed and configured
